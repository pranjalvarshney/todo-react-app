{"version":3,"sources":["ItemsList.js","App.js","serviceWorker.js","index.js"],"names":["ItemsList","props","listmap","list","map","data","d","itemKey","toString","key","onDoubleClick","deleteItem","id","value","inputvalue","onChange","e","updateItem","target","Date","slice","className","duration","App","inputChangeHandler","event","setState","item","now","addItem","preventDefault","items","state","console","log","newItems","newtext","newlist","bind","filteredItem","this","filter","onSubmit","placeholder","type","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mUAIe,SAASA,EAAUC,GAE9B,IACMC,EADQD,EAAME,KACEC,KAAI,SAAAC,GAClB,IAAMC,EAAID,EAAKE,QAAQC,WACvB,OAAQ,yBAAKC,IAAKJ,EAAKE,QAASG,cAAe,kBAAMT,EAAMU,WAAWN,EAAKE,WAC/D,uBAAGK,GAAG,gBACF,2BAAOC,MAAOR,EAAKS,WAAYC,SAAU,SAACC,GAAKf,EAAMgB,WAAWD,EAAEE,OAAOL,MAAOR,EAAKE,YACrF,8BAAOY,KAAKb,GAAGc,MAAM,EAAE,UAK/C,OACI,yBAAKC,UAAU,aACX,kBAAC,IAAD,CAAUC,SAAU,KACfpB,I,ICoEFqB,E,kDAlFb,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IAYRuB,mBAAqB,SAACC,GACpB,EAAKC,SAAS,CACZC,KAAO,CACLb,WAAYW,EAAMP,OAAOL,MACzBN,QAASY,KAAKS,UAjBD,EAsBnBC,QAAU,SAACJ,GACTA,EAAMK,iBACN,IAAMC,EAAQ,EAAKC,MAAML,KAEzB,GADAM,QAAQC,IAAIH,GACY,KAArBA,EAAMjB,WAAkB,CACzB,IAAIqB,EAAQ,sBAAO,EAAKH,MAAM7B,MAAlB,CAAuB4B,IACnC,EAAKL,SAAS,CACZvB,KAAMgC,EACNR,KAAO,CACLb,WAAY,GACZP,QAAS,QAhCE,EAsCnBU,WAAa,SAACmB,EAAQ3B,GACpB,IAAM4B,EAAU,EAAKL,MAAM7B,KAC3BkC,EAAQjC,KAAI,SAAAC,GACPA,EAAKE,UAAUE,IAChBJ,EAAKS,WAAYsB,MAGrB,EAAKV,SAAS,CACZvB,KAAMkC,KA3CR,EAAKL,MAAQ,CACX7B,KAAO,GACPwB,KAAO,CACLb,WAAa,GACbP,QAAS,KAGb,EAAKI,WAAa,EAAKA,WAAW2B,KAAhB,gBAVD,E,uDAiDP7B,GACVwB,QAAQC,IAAI,qBACZ,IAAMK,EAAeC,KAAKR,MAAM7B,KAAKsC,QAAQ,SAAApC,GAEzC,OADA4B,QAAQC,IAAI7B,EAAKE,SACVF,EAAKE,UAAYE,KAG5BwB,QAAQC,IAAIK,GACZC,KAAKd,SAAS,CACZvB,KAAMoC,M,+BAMR,OAEE,yBAAKlB,UAAU,OACb,wCACA,gCACE,0BAAMT,GAAG,YAAY8B,SAAUF,KAAKX,SAClC,2BAAOhB,MAAO2B,KAAKR,MAAML,KAAKb,WAAYC,SAAUyB,KAAKhB,mBAAoBZ,GAAG,aAAa+B,YAAY,wCACzG,4BAAQC,KAAK,UAAb,UAGJ,yBAAKhC,GAAG,YACN,kBAAC,EAAD,CAAWT,KAAMqC,KAAKR,MAAM7B,KAAMQ,WAAY6B,KAAK7B,WAAYM,WAAYuB,KAAKvB,mB,GA7ExE4B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.9681a4d1.chunk.js","sourcesContent":["import './ItemsList.css';\nimport React from 'react';\nimport FlipMove from 'react-flip-move';\n\nexport default function ItemsList(props) {\n  \n    const items = props.list    \n    const listmap = items.map(data => {\n            const d = data.itemKey.toString()\n            return  <div key={data.itemKey} onDoubleClick={() => props.deleteItem(data.itemKey)}>\n                        <p id=\"itemdata-div\">\n                            <input value={data.inputvalue} onChange={(e)=>{props.updateItem(e.target.value, data.itemKey)}}/> \n                            <span>{Date(d).slice(0,10)}</span>\n                        </p>\n                    </div>\n        })\n\n    return (\n        <div className=\"ItemsList\">\n            <FlipMove duration={300}>\n                {listmap}\n            </FlipMove>\n        </div>\n    )\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport ItemsList from './ItemsList';\n\nclass App extends Component {\n  \n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      list : [],\n      item : {\n        inputvalue : \"\",\n        itemKey: \"\"\n      }\n    }\n    this.deleteItem = this.deleteItem.bind(this)\n  }\n  \n  inputChangeHandler = (event) => {\n    this.setState({\n      item : {\n        inputvalue: event.target.value,\n        itemKey: Date.now()\n      }\n    })\n  }\n\n  addItem = (event) => {\n    event.preventDefault()\n    const items = this.state.item\n    console.log(items)\n    if(items.inputvalue !== \"\"){\n      var newItems = [...this.state.list,items]\n      this.setState({\n        list: newItems,\n        item : {\n          inputvalue: \"\",\n          itemKey: \"\"\n        }\n      })\n    }\n  }\n\n  updateItem = (newtext,key) => {\n    const newlist = this.state.list;\n    newlist.map(data=>{      \n      if(data.itemKey===key){\n        data.inputvalue= newtext;\n      }\n    })\n    this.setState({\n      list: newlist\n    })\n  }\n  deleteItem (key){\n    console.log(\"deletebtn clicked\")\n    const filteredItem = this.state.list.filter( data => {\n        console.log(data.itemKey)\n        return data.itemKey !== key\n      }\n    )\n    console.log(filteredItem)\n    this.setState({\n      list: filteredItem\n    })\n    \n  }\n  \n  render() {\n    return (\n\n      <div className=\"App\">\n        <h2>Todo App</h2>\n        <header>\n          <form id=\"todo-form\" onSubmit={this.addItem}>\n            <input value={this.state.item.inputvalue} onChange={this.inputChangeHandler} id=\"inputfield\" placeholder=\"Save, edit and double-tap to delete\"/>\n            <button type=\"submit\">Save</button>\n          </form>\n        </header>\n        <div id=\"listdata\">\n          <ItemsList list={this.state.list} deleteItem={this.deleteItem} updateItem={this.updateItem}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}